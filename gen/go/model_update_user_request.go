/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateUserRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserRequest{}

// UpdateUserRequest struct for UpdateUserRequest
type UpdateUserRequest struct {
	Name *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
	AvatarUrl *string `json:"avatar_url,omitempty"`
	Age NullableInt32 `json:"age,omitempty"`
	Gender NullableString `json:"gender,omitempty"`
	Birthplace NullableString `json:"birthplace,omitempty"`
	JobType NullableString `json:"job_type,omitempty"`
	LineAccount NullableString `json:"line_account,omitempty"`
	DiscordAccount NullableString `json:"discord_account,omitempty"`
	Biography NullableString `json:"biography,omitempty"`
}

// NewUpdateUserRequest instantiates a new UpdateUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserRequest() *UpdateUserRequest {
	this := UpdateUserRequest{}
	return &this
}

// NewUpdateUserRequestWithDefaults instantiates a new UpdateUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserRequestWithDefaults() *UpdateUserRequest {
	this := UpdateUserRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateUserRequest) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UpdateUserRequest) SetEmail(v string) {
	o.Email = &v
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *UpdateUserRequest) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserRequest) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *UpdateUserRequest) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetAge returns the Age field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetAge() int32 {
	if o == nil || IsNil(o.Age.Get()) {
		var ret int32
		return ret
	}
	return *o.Age.Get()
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetAgeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Age.Get(), o.Age.IsSet()
}

// HasAge returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasAge() bool {
	if o != nil && o.Age.IsSet() {
		return true
	}

	return false
}

// SetAge gets a reference to the given NullableInt32 and assigns it to the Age field.
func (o *UpdateUserRequest) SetAge(v int32) {
	o.Age.Set(&v)
}
// SetAgeNil sets the value for Age to be an explicit nil
func (o *UpdateUserRequest) SetAgeNil() {
	o.Age.Set(nil)
}

// UnsetAge ensures that no value is present for Age, not even an explicit nil
func (o *UpdateUserRequest) UnsetAge() {
	o.Age.Unset()
}

// GetGender returns the Gender field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetGender() string {
	if o == nil || IsNil(o.Gender.Get()) {
		var ret string
		return ret
	}
	return *o.Gender.Get()
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetGenderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gender.Get(), o.Gender.IsSet()
}

// HasGender returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasGender() bool {
	if o != nil && o.Gender.IsSet() {
		return true
	}

	return false
}

// SetGender gets a reference to the given NullableString and assigns it to the Gender field.
func (o *UpdateUserRequest) SetGender(v string) {
	o.Gender.Set(&v)
}
// SetGenderNil sets the value for Gender to be an explicit nil
func (o *UpdateUserRequest) SetGenderNil() {
	o.Gender.Set(nil)
}

// UnsetGender ensures that no value is present for Gender, not even an explicit nil
func (o *UpdateUserRequest) UnsetGender() {
	o.Gender.Unset()
}

// GetBirthplace returns the Birthplace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetBirthplace() string {
	if o == nil || IsNil(o.Birthplace.Get()) {
		var ret string
		return ret
	}
	return *o.Birthplace.Get()
}

// GetBirthplaceOk returns a tuple with the Birthplace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetBirthplaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Birthplace.Get(), o.Birthplace.IsSet()
}

// HasBirthplace returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasBirthplace() bool {
	if o != nil && o.Birthplace.IsSet() {
		return true
	}

	return false
}

// SetBirthplace gets a reference to the given NullableString and assigns it to the Birthplace field.
func (o *UpdateUserRequest) SetBirthplace(v string) {
	o.Birthplace.Set(&v)
}
// SetBirthplaceNil sets the value for Birthplace to be an explicit nil
func (o *UpdateUserRequest) SetBirthplaceNil() {
	o.Birthplace.Set(nil)
}

// UnsetBirthplace ensures that no value is present for Birthplace, not even an explicit nil
func (o *UpdateUserRequest) UnsetBirthplace() {
	o.Birthplace.Unset()
}

// GetJobType returns the JobType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetJobType() string {
	if o == nil || IsNil(o.JobType.Get()) {
		var ret string
		return ret
	}
	return *o.JobType.Get()
}

// GetJobTypeOk returns a tuple with the JobType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetJobTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobType.Get(), o.JobType.IsSet()
}

// HasJobType returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasJobType() bool {
	if o != nil && o.JobType.IsSet() {
		return true
	}

	return false
}

// SetJobType gets a reference to the given NullableString and assigns it to the JobType field.
func (o *UpdateUserRequest) SetJobType(v string) {
	o.JobType.Set(&v)
}
// SetJobTypeNil sets the value for JobType to be an explicit nil
func (o *UpdateUserRequest) SetJobTypeNil() {
	o.JobType.Set(nil)
}

// UnsetJobType ensures that no value is present for JobType, not even an explicit nil
func (o *UpdateUserRequest) UnsetJobType() {
	o.JobType.Unset()
}

// GetLineAccount returns the LineAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetLineAccount() string {
	if o == nil || IsNil(o.LineAccount.Get()) {
		var ret string
		return ret
	}
	return *o.LineAccount.Get()
}

// GetLineAccountOk returns a tuple with the LineAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetLineAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LineAccount.Get(), o.LineAccount.IsSet()
}

// HasLineAccount returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasLineAccount() bool {
	if o != nil && o.LineAccount.IsSet() {
		return true
	}

	return false
}

// SetLineAccount gets a reference to the given NullableString and assigns it to the LineAccount field.
func (o *UpdateUserRequest) SetLineAccount(v string) {
	o.LineAccount.Set(&v)
}
// SetLineAccountNil sets the value for LineAccount to be an explicit nil
func (o *UpdateUserRequest) SetLineAccountNil() {
	o.LineAccount.Set(nil)
}

// UnsetLineAccount ensures that no value is present for LineAccount, not even an explicit nil
func (o *UpdateUserRequest) UnsetLineAccount() {
	o.LineAccount.Unset()
}

// GetDiscordAccount returns the DiscordAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetDiscordAccount() string {
	if o == nil || IsNil(o.DiscordAccount.Get()) {
		var ret string
		return ret
	}
	return *o.DiscordAccount.Get()
}

// GetDiscordAccountOk returns a tuple with the DiscordAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetDiscordAccountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscordAccount.Get(), o.DiscordAccount.IsSet()
}

// HasDiscordAccount returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasDiscordAccount() bool {
	if o != nil && o.DiscordAccount.IsSet() {
		return true
	}

	return false
}

// SetDiscordAccount gets a reference to the given NullableString and assigns it to the DiscordAccount field.
func (o *UpdateUserRequest) SetDiscordAccount(v string) {
	o.DiscordAccount.Set(&v)
}
// SetDiscordAccountNil sets the value for DiscordAccount to be an explicit nil
func (o *UpdateUserRequest) SetDiscordAccountNil() {
	o.DiscordAccount.Set(nil)
}

// UnsetDiscordAccount ensures that no value is present for DiscordAccount, not even an explicit nil
func (o *UpdateUserRequest) UnsetDiscordAccount() {
	o.DiscordAccount.Unset()
}

// GetBiography returns the Biography field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateUserRequest) GetBiography() string {
	if o == nil || IsNil(o.Biography.Get()) {
		var ret string
		return ret
	}
	return *o.Biography.Get()
}

// GetBiographyOk returns a tuple with the Biography field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateUserRequest) GetBiographyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Biography.Get(), o.Biography.IsSet()
}

// HasBiography returns a boolean if a field has been set.
func (o *UpdateUserRequest) HasBiography() bool {
	if o != nil && o.Biography.IsSet() {
		return true
	}

	return false
}

// SetBiography gets a reference to the given NullableString and assigns it to the Biography field.
func (o *UpdateUserRequest) SetBiography(v string) {
	o.Biography.Set(&v)
}
// SetBiographyNil sets the value for Biography to be an explicit nil
func (o *UpdateUserRequest) SetBiographyNil() {
	o.Biography.Set(nil)
}

// UnsetBiography ensures that no value is present for Biography, not even an explicit nil
func (o *UpdateUserRequest) UnsetBiography() {
	o.Biography.Unset()
}

func (o UpdateUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if o.Age.IsSet() {
		toSerialize["age"] = o.Age.Get()
	}
	if o.Gender.IsSet() {
		toSerialize["gender"] = o.Gender.Get()
	}
	if o.Birthplace.IsSet() {
		toSerialize["birthplace"] = o.Birthplace.Get()
	}
	if o.JobType.IsSet() {
		toSerialize["job_type"] = o.JobType.Get()
	}
	if o.LineAccount.IsSet() {
		toSerialize["line_account"] = o.LineAccount.Get()
	}
	if o.DiscordAccount.IsSet() {
		toSerialize["discord_account"] = o.DiscordAccount.Get()
	}
	if o.Biography.IsSet() {
		toSerialize["biography"] = o.Biography.Get()
	}
	return toSerialize, nil
}

type NullableUpdateUserRequest struct {
	value *UpdateUserRequest
	isSet bool
}

func (v NullableUpdateUserRequest) Get() *UpdateUserRequest {
	return v.value
}

func (v *NullableUpdateUserRequest) Set(val *UpdateUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserRequest(val *UpdateUserRequest) *NullableUpdateUserRequest {
	return &NullableUpdateUserRequest{value: val, isSet: true}
}

func (v NullableUpdateUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


