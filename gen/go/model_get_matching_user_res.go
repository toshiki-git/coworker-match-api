/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetMatchingUserRes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetMatchingUserRes{}

// GetMatchingUserRes struct for GetMatchingUserRes
type GetMatchingUserRes struct {
	UserId string `json:"userId"`
	UserName string `json:"userName"`
	Email string `json:"email"`
	AvatarUrl string `json:"avatarUrl"`
}

type _GetMatchingUserRes GetMatchingUserRes

// NewGetMatchingUserRes instantiates a new GetMatchingUserRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMatchingUserRes(userId string, userName string, email string, avatarUrl string) *GetMatchingUserRes {
	this := GetMatchingUserRes{}
	this.UserId = userId
	this.UserName = userName
	this.Email = email
	this.AvatarUrl = avatarUrl
	return &this
}

// NewGetMatchingUserResWithDefaults instantiates a new GetMatchingUserRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMatchingUserResWithDefaults() *GetMatchingUserRes {
	this := GetMatchingUserRes{}
	return &this
}

// GetUserId returns the UserId field value
func (o *GetMatchingUserRes) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *GetMatchingUserRes) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *GetMatchingUserRes) SetUserId(v string) {
	o.UserId = v
}

// GetUserName returns the UserName field value
func (o *GetMatchingUserRes) GetUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value
// and a boolean to check if the value has been set.
func (o *GetMatchingUserRes) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserName, true
}

// SetUserName sets field value
func (o *GetMatchingUserRes) SetUserName(v string) {
	o.UserName = v
}

// GetEmail returns the Email field value
func (o *GetMatchingUserRes) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *GetMatchingUserRes) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *GetMatchingUserRes) SetEmail(v string) {
	o.Email = v
}

// GetAvatarUrl returns the AvatarUrl field value
func (o *GetMatchingUserRes) GetAvatarUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value
// and a boolean to check if the value has been set.
func (o *GetMatchingUserRes) GetAvatarUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvatarUrl, true
}

// SetAvatarUrl sets field value
func (o *GetMatchingUserRes) SetAvatarUrl(v string) {
	o.AvatarUrl = v
}

func (o GetMatchingUserRes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetMatchingUserRes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["userId"] = o.UserId
	toSerialize["userName"] = o.UserName
	toSerialize["email"] = o.Email
	toSerialize["avatarUrl"] = o.AvatarUrl
	return toSerialize, nil
}

func (o *GetMatchingUserRes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"userId",
		"userName",
		"email",
		"avatarUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetMatchingUserRes := _GetMatchingUserRes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetMatchingUserRes)

	if err != nil {
		return err
	}

	*o = GetMatchingUserRes(varGetMatchingUserRes)

	return err
}

type NullableGetMatchingUserRes struct {
	value *GetMatchingUserRes
	isSet bool
}

func (v NullableGetMatchingUserRes) Get() *GetMatchingUserRes {
	return v.value
}

func (v *NullableGetMatchingUserRes) Set(val *GetMatchingUserRes) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMatchingUserRes) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMatchingUserRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMatchingUserRes(val *GetMatchingUserRes) *NullableGetMatchingUserRes {
	return &NullableGetMatchingUserRes{value: val, isSet: true}
}

func (v NullableGetMatchingUserRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMatchingUserRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


