/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetHobbyResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetHobbyResponseInner{}

// GetHobbyResponseInner struct for GetHobbyResponseInner
type GetHobbyResponseInner struct {
	CategoryId *string `json:"category_id,omitempty"`
	CategoryName *string `json:"category_name,omitempty"`
	Hobbies []Hobby `json:"hobbies,omitempty"`
}

// NewGetHobbyResponseInner instantiates a new GetHobbyResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetHobbyResponseInner() *GetHobbyResponseInner {
	this := GetHobbyResponseInner{}
	return &this
}

// NewGetHobbyResponseInnerWithDefaults instantiates a new GetHobbyResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetHobbyResponseInnerWithDefaults() *GetHobbyResponseInner {
	this := GetHobbyResponseInner{}
	return &this
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *GetHobbyResponseInner) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetHobbyResponseInner) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *GetHobbyResponseInner) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *GetHobbyResponseInner) SetCategoryId(v string) {
	o.CategoryId = &v
}

// GetCategoryName returns the CategoryName field value if set, zero value otherwise.
func (o *GetHobbyResponseInner) GetCategoryName() string {
	if o == nil || IsNil(o.CategoryName) {
		var ret string
		return ret
	}
	return *o.CategoryName
}

// GetCategoryNameOk returns a tuple with the CategoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetHobbyResponseInner) GetCategoryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryName) {
		return nil, false
	}
	return o.CategoryName, true
}

// HasCategoryName returns a boolean if a field has been set.
func (o *GetHobbyResponseInner) HasCategoryName() bool {
	if o != nil && !IsNil(o.CategoryName) {
		return true
	}

	return false
}

// SetCategoryName gets a reference to the given string and assigns it to the CategoryName field.
func (o *GetHobbyResponseInner) SetCategoryName(v string) {
	o.CategoryName = &v
}

// GetHobbies returns the Hobbies field value if set, zero value otherwise.
func (o *GetHobbyResponseInner) GetHobbies() []Hobby {
	if o == nil || IsNil(o.Hobbies) {
		var ret []Hobby
		return ret
	}
	return o.Hobbies
}

// GetHobbiesOk returns a tuple with the Hobbies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetHobbyResponseInner) GetHobbiesOk() ([]Hobby, bool) {
	if o == nil || IsNil(o.Hobbies) {
		return nil, false
	}
	return o.Hobbies, true
}

// HasHobbies returns a boolean if a field has been set.
func (o *GetHobbyResponseInner) HasHobbies() bool {
	if o != nil && !IsNil(o.Hobbies) {
		return true
	}

	return false
}

// SetHobbies gets a reference to the given []Hobby and assigns it to the Hobbies field.
func (o *GetHobbyResponseInner) SetHobbies(v []Hobby) {
	o.Hobbies = v
}

func (o GetHobbyResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetHobbyResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	if !IsNil(o.CategoryName) {
		toSerialize["category_name"] = o.CategoryName
	}
	if !IsNil(o.Hobbies) {
		toSerialize["hobbies"] = o.Hobbies
	}
	return toSerialize, nil
}

type NullableGetHobbyResponseInner struct {
	value *GetHobbyResponseInner
	isSet bool
}

func (v NullableGetHobbyResponseInner) Get() *GetHobbyResponseInner {
	return v.value
}

func (v *NullableGetHobbyResponseInner) Set(val *GetHobbyResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHobbyResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHobbyResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHobbyResponseInner(val *GetHobbyResponseInner) *NullableGetHobbyResponseInner {
	return &NullableGetHobbyResponseInner{value: val, isSet: true}
}

func (v NullableGetHobbyResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHobbyResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


