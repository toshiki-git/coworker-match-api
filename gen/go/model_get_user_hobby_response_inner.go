/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GetUserHobbyResponseInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetUserHobbyResponseInner{}

// GetUserHobbyResponseInner struct for GetUserHobbyResponseInner
type GetUserHobbyResponseInner struct {
	HobbyId *string `json:"hobby_id,omitempty"`
	HobbyName *string `json:"hobby_name,omitempty"`
}

// NewGetUserHobbyResponseInner instantiates a new GetUserHobbyResponseInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUserHobbyResponseInner() *GetUserHobbyResponseInner {
	this := GetUserHobbyResponseInner{}
	return &this
}

// NewGetUserHobbyResponseInnerWithDefaults instantiates a new GetUserHobbyResponseInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUserHobbyResponseInnerWithDefaults() *GetUserHobbyResponseInner {
	this := GetUserHobbyResponseInner{}
	return &this
}

// GetHobbyId returns the HobbyId field value if set, zero value otherwise.
func (o *GetUserHobbyResponseInner) GetHobbyId() string {
	if o == nil || IsNil(o.HobbyId) {
		var ret string
		return ret
	}
	return *o.HobbyId
}

// GetHobbyIdOk returns a tuple with the HobbyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserHobbyResponseInner) GetHobbyIdOk() (*string, bool) {
	if o == nil || IsNil(o.HobbyId) {
		return nil, false
	}
	return o.HobbyId, true
}

// HasHobbyId returns a boolean if a field has been set.
func (o *GetUserHobbyResponseInner) HasHobbyId() bool {
	if o != nil && !IsNil(o.HobbyId) {
		return true
	}

	return false
}

// SetHobbyId gets a reference to the given string and assigns it to the HobbyId field.
func (o *GetUserHobbyResponseInner) SetHobbyId(v string) {
	o.HobbyId = &v
}

// GetHobbyName returns the HobbyName field value if set, zero value otherwise.
func (o *GetUserHobbyResponseInner) GetHobbyName() string {
	if o == nil || IsNil(o.HobbyName) {
		var ret string
		return ret
	}
	return *o.HobbyName
}

// GetHobbyNameOk returns a tuple with the HobbyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserHobbyResponseInner) GetHobbyNameOk() (*string, bool) {
	if o == nil || IsNil(o.HobbyName) {
		return nil, false
	}
	return o.HobbyName, true
}

// HasHobbyName returns a boolean if a field has been set.
func (o *GetUserHobbyResponseInner) HasHobbyName() bool {
	if o != nil && !IsNil(o.HobbyName) {
		return true
	}

	return false
}

// SetHobbyName gets a reference to the given string and assigns it to the HobbyName field.
func (o *GetUserHobbyResponseInner) SetHobbyName(v string) {
	o.HobbyName = &v
}

func (o GetUserHobbyResponseInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetUserHobbyResponseInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HobbyId) {
		toSerialize["hobby_id"] = o.HobbyId
	}
	if !IsNil(o.HobbyName) {
		toSerialize["hobby_name"] = o.HobbyName
	}
	return toSerialize, nil
}

type NullableGetUserHobbyResponseInner struct {
	value *GetUserHobbyResponseInner
	isSet bool
}

func (v NullableGetUserHobbyResponseInner) Get() *GetUserHobbyResponseInner {
	return v.value
}

func (v *NullableGetUserHobbyResponseInner) Set(val *GetUserHobbyResponseInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserHobbyResponseInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserHobbyResponseInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserHobbyResponseInner(val *GetUserHobbyResponseInner) *NullableGetUserHobbyResponseInner {
	return &NullableGetUserHobbyResponseInner{value: val, isSet: true}
}

func (v NullableGetUserHobbyResponseInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserHobbyResponseInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


