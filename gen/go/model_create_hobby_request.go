/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateHobbyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateHobbyRequest{}

// CreateHobbyRequest struct for CreateHobbyRequest
type CreateHobbyRequest struct {
	CreatorId *string `json:"creator_id,omitempty"`
	HobbyName *string `json:"hobby_name,omitempty"`
	CategoryId *string `json:"category_id,omitempty"`
}

// NewCreateHobbyRequest instantiates a new CreateHobbyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateHobbyRequest() *CreateHobbyRequest {
	this := CreateHobbyRequest{}
	return &this
}

// NewCreateHobbyRequestWithDefaults instantiates a new CreateHobbyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateHobbyRequestWithDefaults() *CreateHobbyRequest {
	this := CreateHobbyRequest{}
	return &this
}

// GetCreatorId returns the CreatorId field value if set, zero value otherwise.
func (o *CreateHobbyRequest) GetCreatorId() string {
	if o == nil || IsNil(o.CreatorId) {
		var ret string
		return ret
	}
	return *o.CreatorId
}

// GetCreatorIdOk returns a tuple with the CreatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHobbyRequest) GetCreatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.CreatorId) {
		return nil, false
	}
	return o.CreatorId, true
}

// HasCreatorId returns a boolean if a field has been set.
func (o *CreateHobbyRequest) HasCreatorId() bool {
	if o != nil && !IsNil(o.CreatorId) {
		return true
	}

	return false
}

// SetCreatorId gets a reference to the given string and assigns it to the CreatorId field.
func (o *CreateHobbyRequest) SetCreatorId(v string) {
	o.CreatorId = &v
}

// GetHobbyName returns the HobbyName field value if set, zero value otherwise.
func (o *CreateHobbyRequest) GetHobbyName() string {
	if o == nil || IsNil(o.HobbyName) {
		var ret string
		return ret
	}
	return *o.HobbyName
}

// GetHobbyNameOk returns a tuple with the HobbyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHobbyRequest) GetHobbyNameOk() (*string, bool) {
	if o == nil || IsNil(o.HobbyName) {
		return nil, false
	}
	return o.HobbyName, true
}

// HasHobbyName returns a boolean if a field has been set.
func (o *CreateHobbyRequest) HasHobbyName() bool {
	if o != nil && !IsNil(o.HobbyName) {
		return true
	}

	return false
}

// SetHobbyName gets a reference to the given string and assigns it to the HobbyName field.
func (o *CreateHobbyRequest) SetHobbyName(v string) {
	o.HobbyName = &v
}

// GetCategoryId returns the CategoryId field value if set, zero value otherwise.
func (o *CreateHobbyRequest) GetCategoryId() string {
	if o == nil || IsNil(o.CategoryId) {
		var ret string
		return ret
	}
	return *o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateHobbyRequest) GetCategoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryId) {
		return nil, false
	}
	return o.CategoryId, true
}

// HasCategoryId returns a boolean if a field has been set.
func (o *CreateHobbyRequest) HasCategoryId() bool {
	if o != nil && !IsNil(o.CategoryId) {
		return true
	}

	return false
}

// SetCategoryId gets a reference to the given string and assigns it to the CategoryId field.
func (o *CreateHobbyRequest) SetCategoryId(v string) {
	o.CategoryId = &v
}

func (o CreateHobbyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateHobbyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatorId) {
		toSerialize["creator_id"] = o.CreatorId
	}
	if !IsNil(o.HobbyName) {
		toSerialize["hobby_name"] = o.HobbyName
	}
	if !IsNil(o.CategoryId) {
		toSerialize["category_id"] = o.CategoryId
	}
	return toSerialize, nil
}

type NullableCreateHobbyRequest struct {
	value *CreateHobbyRequest
	isSet bool
}

func (v NullableCreateHobbyRequest) Get() *CreateHobbyRequest {
	return v.value
}

func (v *NullableCreateHobbyRequest) Set(val *CreateHobbyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateHobbyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateHobbyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateHobbyRequest(val *CreateHobbyRequest) *NullableCreateHobbyRequest {
	return &NullableCreateHobbyRequest{value: val, isSet: true}
}

func (v NullableCreateHobbyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateHobbyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


