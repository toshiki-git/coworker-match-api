/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateQuestionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateQuestionRequest{}

// CreateQuestionRequest struct for CreateQuestionRequest
type CreateQuestionRequest struct {
	Answers []Answer `json:"answers,omitempty"`
}

// NewCreateQuestionRequest instantiates a new CreateQuestionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateQuestionRequest() *CreateQuestionRequest {
	this := CreateQuestionRequest{}
	return &this
}

// NewCreateQuestionRequestWithDefaults instantiates a new CreateQuestionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateQuestionRequestWithDefaults() *CreateQuestionRequest {
	this := CreateQuestionRequest{}
	return &this
}

// GetAnswers returns the Answers field value if set, zero value otherwise.
func (o *CreateQuestionRequest) GetAnswers() []Answer {
	if o == nil || IsNil(o.Answers) {
		var ret []Answer
		return ret
	}
	return o.Answers
}

// GetAnswersOk returns a tuple with the Answers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateQuestionRequest) GetAnswersOk() ([]Answer, bool) {
	if o == nil || IsNil(o.Answers) {
		return nil, false
	}
	return o.Answers, true
}

// HasAnswers returns a boolean if a field has been set.
func (o *CreateQuestionRequest) HasAnswers() bool {
	if o != nil && !IsNil(o.Answers) {
		return true
	}

	return false
}

// SetAnswers gets a reference to the given []Answer and assigns it to the Answers field.
func (o *CreateQuestionRequest) SetAnswers(v []Answer) {
	o.Answers = v
}

func (o CreateQuestionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateQuestionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Answers) {
		toSerialize["answers"] = o.Answers
	}
	return toSerialize, nil
}

type NullableCreateQuestionRequest struct {
	value *CreateQuestionRequest
	isSet bool
}

func (v NullableCreateQuestionRequest) Get() *CreateQuestionRequest {
	return v.value
}

func (v *NullableCreateQuestionRequest) Set(val *CreateQuestionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateQuestionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateQuestionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateQuestionRequest(val *CreateQuestionRequest) *NullableCreateQuestionRequest {
	return &NullableCreateQuestionRequest{value: val, isSet: true}
}

func (v NullableCreateQuestionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateQuestionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


