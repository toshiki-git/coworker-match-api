/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateUserHobbyReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserHobbyReq{}

// CreateUserHobbyReq struct for CreateUserHobbyReq
type CreateUserHobbyReq struct {
	HobbyIds []string `json:"hobbyIds"`
}

type _CreateUserHobbyReq CreateUserHobbyReq

// NewCreateUserHobbyReq instantiates a new CreateUserHobbyReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserHobbyReq(hobbyIds []string) *CreateUserHobbyReq {
	this := CreateUserHobbyReq{}
	this.HobbyIds = hobbyIds
	return &this
}

// NewCreateUserHobbyReqWithDefaults instantiates a new CreateUserHobbyReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserHobbyReqWithDefaults() *CreateUserHobbyReq {
	this := CreateUserHobbyReq{}
	return &this
}

// GetHobbyIds returns the HobbyIds field value
func (o *CreateUserHobbyReq) GetHobbyIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.HobbyIds
}

// GetHobbyIdsOk returns a tuple with the HobbyIds field value
// and a boolean to check if the value has been set.
func (o *CreateUserHobbyReq) GetHobbyIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HobbyIds, true
}

// SetHobbyIds sets field value
func (o *CreateUserHobbyReq) SetHobbyIds(v []string) {
	o.HobbyIds = v
}

func (o CreateUserHobbyReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserHobbyReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hobbyIds"] = o.HobbyIds
	return toSerialize, nil
}

func (o *CreateUserHobbyReq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hobbyIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUserHobbyReq := _CreateUserHobbyReq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateUserHobbyReq)

	if err != nil {
		return err
	}

	*o = CreateUserHobbyReq(varCreateUserHobbyReq)

	return err
}

type NullableCreateUserHobbyReq struct {
	value *CreateUserHobbyReq
	isSet bool
}

func (v NullableCreateUserHobbyReq) Get() *CreateUserHobbyReq {
	return v.value
}

func (v *NullableCreateUserHobbyReq) Set(val *CreateUserHobbyReq) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserHobbyReq) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserHobbyReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserHobbyReq(val *CreateUserHobbyReq) *NullableCreateUserHobbyReq {
	return &NullableCreateUserHobbyReq{value: val, isSet: true}
}

func (v NullableCreateUserHobbyReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserHobbyReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


