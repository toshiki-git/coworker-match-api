/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetUserHobbyRes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetUserHobbyRes{}

// GetUserHobbyRes struct for GetUserHobbyRes
type GetUserHobbyRes struct {
	Hobbies []Hobby `json:"hobbies"`
}

type _GetUserHobbyRes GetUserHobbyRes

// NewGetUserHobbyRes instantiates a new GetUserHobbyRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUserHobbyRes(hobbies []Hobby) *GetUserHobbyRes {
	this := GetUserHobbyRes{}
	this.Hobbies = hobbies
	return &this
}

// NewGetUserHobbyResWithDefaults instantiates a new GetUserHobbyRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUserHobbyResWithDefaults() *GetUserHobbyRes {
	this := GetUserHobbyRes{}
	return &this
}

// GetHobbies returns the Hobbies field value
func (o *GetUserHobbyRes) GetHobbies() []Hobby {
	if o == nil {
		var ret []Hobby
		return ret
	}

	return o.Hobbies
}

// GetHobbiesOk returns a tuple with the Hobbies field value
// and a boolean to check if the value has been set.
func (o *GetUserHobbyRes) GetHobbiesOk() ([]Hobby, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hobbies, true
}

// SetHobbies sets field value
func (o *GetUserHobbyRes) SetHobbies(v []Hobby) {
	o.Hobbies = v
}

func (o GetUserHobbyRes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetUserHobbyRes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hobbies"] = o.Hobbies
	return toSerialize, nil
}

func (o *GetUserHobbyRes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hobbies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetUserHobbyRes := _GetUserHobbyRes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetUserHobbyRes)

	if err != nil {
		return err
	}

	*o = GetUserHobbyRes(varGetUserHobbyRes)

	return err
}

type NullableGetUserHobbyRes struct {
	value *GetUserHobbyRes
	isSet bool
}

func (v NullableGetUserHobbyRes) Get() *GetUserHobbyRes {
	return v.value
}

func (v *NullableGetUserHobbyRes) Set(val *GetUserHobbyRes) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserHobbyRes) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserHobbyRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserHobbyRes(val *GetUserHobbyRes) *NullableGetUserHobbyRes {
	return &NullableGetUserHobbyRes{value: val, isSet: true}
}

func (v NullableGetUserHobbyRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserHobbyRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


