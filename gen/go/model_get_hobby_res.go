/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetHobbyRes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetHobbyRes{}

// GetHobbyRes struct for GetHobbyRes
type GetHobbyRes struct {
	HobbyGroups []GetHobbyResHobbyGroupsInner `json:"hobbyGroups"`
}

type _GetHobbyRes GetHobbyRes

// NewGetHobbyRes instantiates a new GetHobbyRes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetHobbyRes(hobbyGroups []GetHobbyResHobbyGroupsInner) *GetHobbyRes {
	this := GetHobbyRes{}
	this.HobbyGroups = hobbyGroups
	return &this
}

// NewGetHobbyResWithDefaults instantiates a new GetHobbyRes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetHobbyResWithDefaults() *GetHobbyRes {
	this := GetHobbyRes{}
	return &this
}

// GetHobbyGroups returns the HobbyGroups field value
func (o *GetHobbyRes) GetHobbyGroups() []GetHobbyResHobbyGroupsInner {
	if o == nil {
		var ret []GetHobbyResHobbyGroupsInner
		return ret
	}

	return o.HobbyGroups
}

// GetHobbyGroupsOk returns a tuple with the HobbyGroups field value
// and a boolean to check if the value has been set.
func (o *GetHobbyRes) GetHobbyGroupsOk() ([]GetHobbyResHobbyGroupsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.HobbyGroups, true
}

// SetHobbyGroups sets field value
func (o *GetHobbyRes) SetHobbyGroups(v []GetHobbyResHobbyGroupsInner) {
	o.HobbyGroups = v
}

func (o GetHobbyRes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetHobbyRes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hobbyGroups"] = o.HobbyGroups
	return toSerialize, nil
}

func (o *GetHobbyRes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hobbyGroups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetHobbyRes := _GetHobbyRes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetHobbyRes)

	if err != nil {
		return err
	}

	*o = GetHobbyRes(varGetHobbyRes)

	return err
}

type NullableGetHobbyRes struct {
	value *GetHobbyRes
	isSet bool
}

func (v NullableGetHobbyRes) Get() *GetHobbyRes {
	return v.value
}

func (v *NullableGetHobbyRes) Set(val *GetHobbyRes) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHobbyRes) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHobbyRes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHobbyRes(val *GetHobbyRes) *NullableGetHobbyRes {
	return &NullableGetHobbyRes{value: val, isSet: true}
}

func (v NullableGetHobbyRes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHobbyRes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


