/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Question type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Question{}

// Question struct for Question
type Question struct {
	QuestionId string `json:"question_id"`
	QuestionText string `json:"question_text"`
	Choice1 Choice `json:"choice1"`
	Choice2 Choice `json:"choice2"`
}

type _Question Question

// NewQuestion instantiates a new Question object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuestion(questionId string, questionText string, choice1 Choice, choice2 Choice) *Question {
	this := Question{}
	this.QuestionId = questionId
	this.QuestionText = questionText
	this.Choice1 = choice1
	this.Choice2 = choice2
	return &this
}

// NewQuestionWithDefaults instantiates a new Question object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestionWithDefaults() *Question {
	this := Question{}
	return &this
}

// GetQuestionId returns the QuestionId field value
func (o *Question) GetQuestionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuestionId
}

// GetQuestionIdOk returns a tuple with the QuestionId field value
// and a boolean to check if the value has been set.
func (o *Question) GetQuestionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuestionId, true
}

// SetQuestionId sets field value
func (o *Question) SetQuestionId(v string) {
	o.QuestionId = v
}

// GetQuestionText returns the QuestionText field value
func (o *Question) GetQuestionText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuestionText
}

// GetQuestionTextOk returns a tuple with the QuestionText field value
// and a boolean to check if the value has been set.
func (o *Question) GetQuestionTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuestionText, true
}

// SetQuestionText sets field value
func (o *Question) SetQuestionText(v string) {
	o.QuestionText = v
}

// GetChoice1 returns the Choice1 field value
func (o *Question) GetChoice1() Choice {
	if o == nil {
		var ret Choice
		return ret
	}

	return o.Choice1
}

// GetChoice1Ok returns a tuple with the Choice1 field value
// and a boolean to check if the value has been set.
func (o *Question) GetChoice1Ok() (*Choice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Choice1, true
}

// SetChoice1 sets field value
func (o *Question) SetChoice1(v Choice) {
	o.Choice1 = v
}

// GetChoice2 returns the Choice2 field value
func (o *Question) GetChoice2() Choice {
	if o == nil {
		var ret Choice
		return ret
	}

	return o.Choice2
}

// GetChoice2Ok returns a tuple with the Choice2 field value
// and a boolean to check if the value has been set.
func (o *Question) GetChoice2Ok() (*Choice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Choice2, true
}

// SetChoice2 sets field value
func (o *Question) SetChoice2(v Choice) {
	o.Choice2 = v
}

func (o Question) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Question) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["question_id"] = o.QuestionId
	toSerialize["question_text"] = o.QuestionText
	toSerialize["choice1"] = o.Choice1
	toSerialize["choice2"] = o.Choice2
	return toSerialize, nil
}

func (o *Question) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"question_id",
		"question_text",
		"choice1",
		"choice2",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuestion := _Question{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuestion)

	if err != nil {
		return err
	}

	*o = Question(varQuestion)

	return err
}

type NullableQuestion struct {
	value *Question
	isSet bool
}

func (v NullableQuestion) Get() *Question {
	return v.value
}

func (v *NullableQuestion) Set(val *Question) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestion(val *Question) *NullableQuestion {
	return &NullableQuestion{value: val, isSet: true}
}

func (v NullableQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


