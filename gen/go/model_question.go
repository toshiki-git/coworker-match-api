/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Question type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Question{}

// Question struct for Question
type Question struct {
	QuestionId *string `json:"question_id,omitempty"`
	QuestionText *string `json:"question_text,omitempty"`
	Choice1 *Choice `json:"choice1,omitempty"`
	Choice2 *Choice `json:"choice2,omitempty"`
}

// NewQuestion instantiates a new Question object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuestion() *Question {
	this := Question{}
	return &this
}

// NewQuestionWithDefaults instantiates a new Question object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestionWithDefaults() *Question {
	this := Question{}
	return &this
}

// GetQuestionId returns the QuestionId field value if set, zero value otherwise.
func (o *Question) GetQuestionId() string {
	if o == nil || IsNil(o.QuestionId) {
		var ret string
		return ret
	}
	return *o.QuestionId
}

// GetQuestionIdOk returns a tuple with the QuestionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetQuestionIdOk() (*string, bool) {
	if o == nil || IsNil(o.QuestionId) {
		return nil, false
	}
	return o.QuestionId, true
}

// HasQuestionId returns a boolean if a field has been set.
func (o *Question) HasQuestionId() bool {
	if o != nil && !IsNil(o.QuestionId) {
		return true
	}

	return false
}

// SetQuestionId gets a reference to the given string and assigns it to the QuestionId field.
func (o *Question) SetQuestionId(v string) {
	o.QuestionId = &v
}

// GetQuestionText returns the QuestionText field value if set, zero value otherwise.
func (o *Question) GetQuestionText() string {
	if o == nil || IsNil(o.QuestionText) {
		var ret string
		return ret
	}
	return *o.QuestionText
}

// GetQuestionTextOk returns a tuple with the QuestionText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetQuestionTextOk() (*string, bool) {
	if o == nil || IsNil(o.QuestionText) {
		return nil, false
	}
	return o.QuestionText, true
}

// HasQuestionText returns a boolean if a field has been set.
func (o *Question) HasQuestionText() bool {
	if o != nil && !IsNil(o.QuestionText) {
		return true
	}

	return false
}

// SetQuestionText gets a reference to the given string and assigns it to the QuestionText field.
func (o *Question) SetQuestionText(v string) {
	o.QuestionText = &v
}

// GetChoice1 returns the Choice1 field value if set, zero value otherwise.
func (o *Question) GetChoice1() Choice {
	if o == nil || IsNil(o.Choice1) {
		var ret Choice
		return ret
	}
	return *o.Choice1
}

// GetChoice1Ok returns a tuple with the Choice1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetChoice1Ok() (*Choice, bool) {
	if o == nil || IsNil(o.Choice1) {
		return nil, false
	}
	return o.Choice1, true
}

// HasChoice1 returns a boolean if a field has been set.
func (o *Question) HasChoice1() bool {
	if o != nil && !IsNil(o.Choice1) {
		return true
	}

	return false
}

// SetChoice1 gets a reference to the given Choice and assigns it to the Choice1 field.
func (o *Question) SetChoice1(v Choice) {
	o.Choice1 = &v
}

// GetChoice2 returns the Choice2 field value if set, zero value otherwise.
func (o *Question) GetChoice2() Choice {
	if o == nil || IsNil(o.Choice2) {
		var ret Choice
		return ret
	}
	return *o.Choice2
}

// GetChoice2Ok returns a tuple with the Choice2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Question) GetChoice2Ok() (*Choice, bool) {
	if o == nil || IsNil(o.Choice2) {
		return nil, false
	}
	return o.Choice2, true
}

// HasChoice2 returns a boolean if a field has been set.
func (o *Question) HasChoice2() bool {
	if o != nil && !IsNil(o.Choice2) {
		return true
	}

	return false
}

// SetChoice2 gets a reference to the given Choice and assigns it to the Choice2 field.
func (o *Question) SetChoice2(v Choice) {
	o.Choice2 = &v
}

func (o Question) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Question) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QuestionId) {
		toSerialize["question_id"] = o.QuestionId
	}
	if !IsNil(o.QuestionText) {
		toSerialize["question_text"] = o.QuestionText
	}
	if !IsNil(o.Choice1) {
		toSerialize["choice1"] = o.Choice1
	}
	if !IsNil(o.Choice2) {
		toSerialize["choice2"] = o.Choice2
	}
	return toSerialize, nil
}

type NullableQuestion struct {
	value *Question
	isSet bool
}

func (v NullableQuestion) Get() *Question {
	return v.value
}

func (v *NullableQuestion) Set(val *Question) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestion) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestion(val *Question) *NullableQuestion {
	return &NullableQuestion{value: val, isSet: true}
}

func (v NullableQuestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


