/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Answer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Answer{}

// Answer struct for Answer
type Answer struct {
	QuestionId string `json:"questionId"`
	Answer string `json:"answer"`
}

type _Answer Answer

// NewAnswer instantiates a new Answer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnswer(questionId string, answer string) *Answer {
	this := Answer{}
	this.QuestionId = questionId
	this.Answer = answer
	return &this
}

// NewAnswerWithDefaults instantiates a new Answer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerWithDefaults() *Answer {
	this := Answer{}
	return &this
}

// GetQuestionId returns the QuestionId field value
func (o *Answer) GetQuestionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuestionId
}

// GetQuestionIdOk returns a tuple with the QuestionId field value
// and a boolean to check if the value has been set.
func (o *Answer) GetQuestionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuestionId, true
}

// SetQuestionId sets field value
func (o *Answer) SetQuestionId(v string) {
	o.QuestionId = v
}

// GetAnswer returns the Answer field value
func (o *Answer) GetAnswer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value
// and a boolean to check if the value has been set.
func (o *Answer) GetAnswerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Answer, true
}

// SetAnswer sets field value
func (o *Answer) SetAnswer(v string) {
	o.Answer = v
}

func (o Answer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Answer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["questionId"] = o.QuestionId
	toSerialize["answer"] = o.Answer
	return toSerialize, nil
}

func (o *Answer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"questionId",
		"answer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnswer := _Answer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnswer)

	if err != nil {
		return err
	}

	*o = Answer(varAnswer)

	return err
}

type NullableAnswer struct {
	value *Answer
	isSet bool
}

func (v NullableAnswer) Get() *Answer {
	return v.value
}

func (v *NullableAnswer) Set(val *Answer) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswer(val *Answer) *NullableAnswer {
	return &NullableAnswer{value: val, isSet: true}
}

func (v NullableAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


