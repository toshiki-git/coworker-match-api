/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CategoryInterest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoryInterest{}

// CategoryInterest Represents user's interest percentage for a specific category
type CategoryInterest struct {
	// Category's unique identifier
	CategoryId string `json:"categoryId"`
	// Name of the category
	CategoryName string `json:"categoryName"`
	// User's interest percentage in this category (0-100%)
	InterestPercentage int32 `json:"interestPercentage"`
}

type _CategoryInterest CategoryInterest

// NewCategoryInterest instantiates a new CategoryInterest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoryInterest(categoryId string, categoryName string, interestPercentage int32) *CategoryInterest {
	this := CategoryInterest{}
	this.CategoryId = categoryId
	this.CategoryName = categoryName
	this.InterestPercentage = interestPercentage
	return &this
}

// NewCategoryInterestWithDefaults instantiates a new CategoryInterest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryInterestWithDefaults() *CategoryInterest {
	this := CategoryInterest{}
	return &this
}

// GetCategoryId returns the CategoryId field value
func (o *CategoryInterest) GetCategoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *CategoryInterest) GetCategoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *CategoryInterest) SetCategoryId(v string) {
	o.CategoryId = v
}

// GetCategoryName returns the CategoryName field value
func (o *CategoryInterest) GetCategoryName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CategoryName
}

// GetCategoryNameOk returns a tuple with the CategoryName field value
// and a boolean to check if the value has been set.
func (o *CategoryInterest) GetCategoryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryName, true
}

// SetCategoryName sets field value
func (o *CategoryInterest) SetCategoryName(v string) {
	o.CategoryName = v
}

// GetInterestPercentage returns the InterestPercentage field value
func (o *CategoryInterest) GetInterestPercentage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InterestPercentage
}

// GetInterestPercentageOk returns a tuple with the InterestPercentage field value
// and a boolean to check if the value has been set.
func (o *CategoryInterest) GetInterestPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InterestPercentage, true
}

// SetInterestPercentage sets field value
func (o *CategoryInterest) SetInterestPercentage(v int32) {
	o.InterestPercentage = v
}

func (o CategoryInterest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoryInterest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["categoryId"] = o.CategoryId
	toSerialize["categoryName"] = o.CategoryName
	toSerialize["interestPercentage"] = o.InterestPercentage
	return toSerialize, nil
}

func (o *CategoryInterest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"categoryId",
		"categoryName",
		"interestPercentage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCategoryInterest := _CategoryInterest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCategoryInterest)

	if err != nil {
		return err
	}

	*o = CategoryInterest(varCategoryInterest)

	return err
}

type NullableCategoryInterest struct {
	value *CategoryInterest
	isSet bool
}

func (v NullableCategoryInterest) Get() *CategoryInterest {
	return v.value
}

func (v *NullableCategoryInterest) Set(val *CategoryInterest) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoryInterest) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoryInterest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoryInterest(val *CategoryInterest) *NullableCategoryInterest {
	return &NullableCategoryInterest{value: val, isSet: true}
}

func (v NullableCategoryInterest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoryInterest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


