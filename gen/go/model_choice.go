/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Choice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Choice{}

// Choice struct for Choice
type Choice struct {
	ChoiceText string `json:"choiceText"`
	ChoiceImageUrl string `json:"choiceImageUrl"`
}

type _Choice Choice

// NewChoice instantiates a new Choice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChoice(choiceText string, choiceImageUrl string) *Choice {
	this := Choice{}
	this.ChoiceText = choiceText
	this.ChoiceImageUrl = choiceImageUrl
	return &this
}

// NewChoiceWithDefaults instantiates a new Choice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChoiceWithDefaults() *Choice {
	this := Choice{}
	return &this
}

// GetChoiceText returns the ChoiceText field value
func (o *Choice) GetChoiceText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChoiceText
}

// GetChoiceTextOk returns a tuple with the ChoiceText field value
// and a boolean to check if the value has been set.
func (o *Choice) GetChoiceTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChoiceText, true
}

// SetChoiceText sets field value
func (o *Choice) SetChoiceText(v string) {
	o.ChoiceText = v
}

// GetChoiceImageUrl returns the ChoiceImageUrl field value
func (o *Choice) GetChoiceImageUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChoiceImageUrl
}

// GetChoiceImageUrlOk returns a tuple with the ChoiceImageUrl field value
// and a boolean to check if the value has been set.
func (o *Choice) GetChoiceImageUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChoiceImageUrl, true
}

// SetChoiceImageUrl sets field value
func (o *Choice) SetChoiceImageUrl(v string) {
	o.ChoiceImageUrl = v
}

func (o Choice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Choice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["choiceText"] = o.ChoiceText
	toSerialize["choiceImageUrl"] = o.ChoiceImageUrl
	return toSerialize, nil
}

func (o *Choice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"choiceText",
		"choiceImageUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChoice := _Choice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChoice)

	if err != nil {
		return err
	}

	*o = Choice(varChoice)

	return err
}

type NullableChoice struct {
	value *Choice
	isSet bool
}

func (v NullableChoice) Get() *Choice {
	return v.value
}

func (v *NullableChoice) Set(val *Choice) {
	v.value = val
	v.isSet = true
}

func (v NullableChoice) IsSet() bool {
	return v.isSet
}

func (v *NullableChoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChoice(val *Choice) *NullableChoice {
	return &NullableChoice{value: val, isSet: true}
}

func (v NullableChoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


