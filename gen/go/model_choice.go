/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Choice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Choice{}

// Choice struct for Choice
type Choice struct {
	ChoiceText *string `json:"choice_text,omitempty"`
	ChoiceImageUrl *string `json:"choice_image_url,omitempty"`
}

// NewChoice instantiates a new Choice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChoice() *Choice {
	this := Choice{}
	return &this
}

// NewChoiceWithDefaults instantiates a new Choice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChoiceWithDefaults() *Choice {
	this := Choice{}
	return &this
}

// GetChoiceText returns the ChoiceText field value if set, zero value otherwise.
func (o *Choice) GetChoiceText() string {
	if o == nil || IsNil(o.ChoiceText) {
		var ret string
		return ret
	}
	return *o.ChoiceText
}

// GetChoiceTextOk returns a tuple with the ChoiceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Choice) GetChoiceTextOk() (*string, bool) {
	if o == nil || IsNil(o.ChoiceText) {
		return nil, false
	}
	return o.ChoiceText, true
}

// HasChoiceText returns a boolean if a field has been set.
func (o *Choice) HasChoiceText() bool {
	if o != nil && !IsNil(o.ChoiceText) {
		return true
	}

	return false
}

// SetChoiceText gets a reference to the given string and assigns it to the ChoiceText field.
func (o *Choice) SetChoiceText(v string) {
	o.ChoiceText = &v
}

// GetChoiceImageUrl returns the ChoiceImageUrl field value if set, zero value otherwise.
func (o *Choice) GetChoiceImageUrl() string {
	if o == nil || IsNil(o.ChoiceImageUrl) {
		var ret string
		return ret
	}
	return *o.ChoiceImageUrl
}

// GetChoiceImageUrlOk returns a tuple with the ChoiceImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Choice) GetChoiceImageUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ChoiceImageUrl) {
		return nil, false
	}
	return o.ChoiceImageUrl, true
}

// HasChoiceImageUrl returns a boolean if a field has been set.
func (o *Choice) HasChoiceImageUrl() bool {
	if o != nil && !IsNil(o.ChoiceImageUrl) {
		return true
	}

	return false
}

// SetChoiceImageUrl gets a reference to the given string and assigns it to the ChoiceImageUrl field.
func (o *Choice) SetChoiceImageUrl(v string) {
	o.ChoiceImageUrl = &v
}

func (o Choice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Choice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChoiceText) {
		toSerialize["choice_text"] = o.ChoiceText
	}
	if !IsNil(o.ChoiceImageUrl) {
		toSerialize["choice_image_url"] = o.ChoiceImageUrl
	}
	return toSerialize, nil
}

type NullableChoice struct {
	value *Choice
	isSet bool
}

func (v NullableChoice) Get() *Choice {
	return v.value
}

func (v *NullableChoice) Set(val *Choice) {
	v.value = val
	v.isSet = true
}

func (v NullableChoice) IsSet() bool {
	return v.isSet
}

func (v *NullableChoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChoice(val *Choice) *NullableChoice {
	return &NullableChoice{value: val, isSet: true}
}

func (v NullableChoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


