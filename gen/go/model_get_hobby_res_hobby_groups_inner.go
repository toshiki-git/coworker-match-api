/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetHobbyResHobbyGroupsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetHobbyResHobbyGroupsInner{}

// GetHobbyResHobbyGroupsInner struct for GetHobbyResHobbyGroupsInner
type GetHobbyResHobbyGroupsInner struct {
	CategoryId string `json:"categoryId"`
	CategoryName string `json:"categoryName"`
	Hobbies []Hobby `json:"hobbies"`
}

type _GetHobbyResHobbyGroupsInner GetHobbyResHobbyGroupsInner

// NewGetHobbyResHobbyGroupsInner instantiates a new GetHobbyResHobbyGroupsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetHobbyResHobbyGroupsInner(categoryId string, categoryName string, hobbies []Hobby) *GetHobbyResHobbyGroupsInner {
	this := GetHobbyResHobbyGroupsInner{}
	this.CategoryId = categoryId
	this.CategoryName = categoryName
	this.Hobbies = hobbies
	return &this
}

// NewGetHobbyResHobbyGroupsInnerWithDefaults instantiates a new GetHobbyResHobbyGroupsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetHobbyResHobbyGroupsInnerWithDefaults() *GetHobbyResHobbyGroupsInner {
	this := GetHobbyResHobbyGroupsInner{}
	return &this
}

// GetCategoryId returns the CategoryId field value
func (o *GetHobbyResHobbyGroupsInner) GetCategoryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CategoryId
}

// GetCategoryIdOk returns a tuple with the CategoryId field value
// and a boolean to check if the value has been set.
func (o *GetHobbyResHobbyGroupsInner) GetCategoryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryId, true
}

// SetCategoryId sets field value
func (o *GetHobbyResHobbyGroupsInner) SetCategoryId(v string) {
	o.CategoryId = v
}

// GetCategoryName returns the CategoryName field value
func (o *GetHobbyResHobbyGroupsInner) GetCategoryName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CategoryName
}

// GetCategoryNameOk returns a tuple with the CategoryName field value
// and a boolean to check if the value has been set.
func (o *GetHobbyResHobbyGroupsInner) GetCategoryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CategoryName, true
}

// SetCategoryName sets field value
func (o *GetHobbyResHobbyGroupsInner) SetCategoryName(v string) {
	o.CategoryName = v
}

// GetHobbies returns the Hobbies field value
func (o *GetHobbyResHobbyGroupsInner) GetHobbies() []Hobby {
	if o == nil {
		var ret []Hobby
		return ret
	}

	return o.Hobbies
}

// GetHobbiesOk returns a tuple with the Hobbies field value
// and a boolean to check if the value has been set.
func (o *GetHobbyResHobbyGroupsInner) GetHobbiesOk() ([]Hobby, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hobbies, true
}

// SetHobbies sets field value
func (o *GetHobbyResHobbyGroupsInner) SetHobbies(v []Hobby) {
	o.Hobbies = v
}

func (o GetHobbyResHobbyGroupsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetHobbyResHobbyGroupsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["categoryId"] = o.CategoryId
	toSerialize["categoryName"] = o.CategoryName
	toSerialize["hobbies"] = o.Hobbies
	return toSerialize, nil
}

func (o *GetHobbyResHobbyGroupsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"categoryId",
		"categoryName",
		"hobbies",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetHobbyResHobbyGroupsInner := _GetHobbyResHobbyGroupsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetHobbyResHobbyGroupsInner)

	if err != nil {
		return err
	}

	*o = GetHobbyResHobbyGroupsInner(varGetHobbyResHobbyGroupsInner)

	return err
}

type NullableGetHobbyResHobbyGroupsInner struct {
	value *GetHobbyResHobbyGroupsInner
	isSet bool
}

func (v NullableGetHobbyResHobbyGroupsInner) Get() *GetHobbyResHobbyGroupsInner {
	return v.value
}

func (v *NullableGetHobbyResHobbyGroupsInner) Set(val *GetHobbyResHobbyGroupsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetHobbyResHobbyGroupsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetHobbyResHobbyGroupsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetHobbyResHobbyGroupsInner(val *GetHobbyResHobbyGroupsInner) *NullableGetHobbyResHobbyGroupsInner {
	return &NullableGetHobbyResHobbyGroupsInner{value: val, isSet: true}
}

func (v NullableGetHobbyResHobbyGroupsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetHobbyResHobbyGroupsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


