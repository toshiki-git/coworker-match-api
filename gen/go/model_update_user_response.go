/*
CoWorkerMatch API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateUserResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateUserResponse{}

// UpdateUserResponse struct for UpdateUserResponse
type UpdateUserResponse struct {
	User *User `json:"user,omitempty"`
}

// NewUpdateUserResponse instantiates a new UpdateUserResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateUserResponse() *UpdateUserResponse {
	this := UpdateUserResponse{}
	return &this
}

// NewUpdateUserResponseWithDefaults instantiates a new UpdateUserResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateUserResponseWithDefaults() *UpdateUserResponse {
	this := UpdateUserResponse{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UpdateUserResponse) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateUserResponse) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *UpdateUserResponse) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *UpdateUserResponse) SetUser(v User) {
	o.User = &v
}

func (o UpdateUserResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateUserResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableUpdateUserResponse struct {
	value *UpdateUserResponse
	isSet bool
}

func (v NullableUpdateUserResponse) Get() *UpdateUserResponse {
	return v.value
}

func (v *NullableUpdateUserResponse) Set(val *UpdateUserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateUserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateUserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateUserResponse(val *UpdateUserResponse) *NullableUpdateUserResponse {
	return &NullableUpdateUserResponse{value: val, isSet: true}
}

func (v NullableUpdateUserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateUserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


